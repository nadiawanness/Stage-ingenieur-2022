security:
    #enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    #role_hierarchy:
     #   ROLE_USER:
     #   ROLE_ADMIN:       ROLE_USER
      #  ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_USER]
    password_hashers:
        App\Entity\CoreUser:
            algorithm: auto # This should be the same value as in config/packages/security.yaml
            cost: 4 # Lowest possible value for bcrypt
            time_cost: 3 # Lowest possible value for argon
            memory_cost: 10 # Lowest possible value for argon
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 
            algorithm: 'auto'
            cost:      15
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        app_user_providers:
            entity:
                class: App\Entity\CoreUser
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            provider: app_user_providers
            jwt: ~

        
        
        #main:
            #lazy: true
            #provider: app_user_providers
            #custom_authenticator: App\Security\CoreUserAuthenticator
            #logout:
                #path: app_logout

       
        
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: /getAdmin, roles: ROLE_SUPER_ADMIN }
        # - { path: /postAdmin, roles: ROLE_SUPER_ADMIN }
        # - { path: /getSimpleUser, roles: ROLE_ADMIN }
        #   (this one will match URLs like /api/postSimpleUser/2)
        # - { path: /postSimpleUser/\d+$\, roles: ROLE_ADMIN }
        # - { path: /changeStatusUser/\d+$\/(\d+$\ | [a-zA-Z]), roles: ROLE_ADMIN }
        # - { path: /enableSimpleUser/\d+$\/(\d+$\ | [a-zA-Z]), roles: ROLE_ADMIN }
        # - { path: /disableSimpleUser/\d+$\/(\d+$\ | [a-zA-Z]), roles: ROLE_ADMIN }
        # - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
